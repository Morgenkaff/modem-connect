#!/bin/bash

# This script (together with modem-connect-start and modem_connect-stop)
# is used to control a usb modem as was it a service.

# First some sort of logging control
log() {

	help_text="See modem-connect --help for more info. "

	if [ "$1" = 1 ]; then
		echo -e "Failed to run script. $2"
		echo -e $help_text
	elif [ "$1" != 1 ] && [ "$verbose" = 1 ]; then
		echo -e $1
	fi
}

# Function to print a help text in "its own" echo instead of using the logger.
print_help() {
	echo -e "This is 'help'. (Which really should be written by now...)\n\nBut this script should be run with at least 1 flag.\nThe supported flags are:\n-c  --connect    : Connects the modem, if the wwan0 interface exists and is not already connected.\n		   Takes precedens of -d/--disconnect, if both are used.\n-d  --disconnect : Disconnects the modem (by taking the wwan0 interface down).\n-h  --help       : Shows this help text.\n-v  --verbose    : Set output to verbose. (Lots of log.)\n"
}

# Check if the interface (modem) is connected (and named wwan0)
# Should prevent the problem with the wierd name (the wwx23098rglkj349-ish name)
interface_exists() {

	# Check if the interface exists, if the cat gives an error, just ignore i (2> /dev/null)
	wwan0_state=$(cat /sys/class/net/wwan0/operstate 2> /dev/null)

	if [ "$wwan0_state" = "up" ] || [ "$wwan0_state" = "down" ] || [ "$wwan0_state" = "unknown" ]; then
		return 0
	else
		return 1
	fi
}

# check connection to internet
have_internet() {

	ping_url=$(ping -q -I wwan0 -w 1 -c 1 google.com 2> /dev/null)
	ping_ip=$(ping -q -I wwan0 -w 1 -c 1 1.1.1.1 2> /dev/null)

	if [ "$ping_url" ] && [ "$ping_ip" ]; then
		return 0
	else
		return 1
	fi
}

# Code to connect the usb modem
# commands taken from this giude:
# https://docs.sixfab.com/page/setting-up-a-data-connection-over-qmi-interface-using-libqmi
setup_connection() {

	# First taking the interface down
	/usr/sbin/ip link set wwan0 down

	# Enabling the use of raw-ip
	echo 'Y' | tee /sys/class/net/wwan0/qmi/raw_ip

	# Setting the interface back up
	/usr/sbin/ip link set wwan0 up

	# give it some time to do it's thing
<<<<<<< HEAD
	$(sleep 4)
=======
	$(sleep 2)
>>>>>>> main

	# Make the initial connection the the network
	/usr/bin/qmicli -d /dev/cdc-wdm0 --device-open-net='net-raw-ip|net-no-qos-header' --wds-start-network=internet --client-no-release-cid

	# Getting an IP address
	/usr/sbin/udhcpc -q -f -i wwan0
}

connect() {

	# Check if the interface exists:
	if interface_exists; then
		log "Modem is inserted and named wwan0.\nTesting connection."
		# Check if there is connection to the internet
		if have_internet; then
			log "Already connected to the internet. No need to connect again."
		else
			log "Not connected to the internet. Going to connect the modem:"
			# If not, connect the modem and set up IP
			setup_connection
			# Check if the connection have been established
			if have_internet; then
				log "Connection to the internet established."
			else
				log 1 "Connection to the internet NOT established."
			fi
		fi
	else
		log 1 "Modem is not inserted, interface does not exists or is not named wwan0."
		# SOME SORT OF ERROR-LIGHT SHOULD BE ENABLED HERE
		exit 0
	fi
}


# This function disconnects the modem
# For a start just taking the interface down
disconnect() {

	ip link set wwan0 down
}

# THE ACTUAL RUNNING LOGIC

# Fist check if the script have root privileges
# Exit with error if not
if [ $(id -u) != 0 ]; then
	log 1 "Please run this script as root."
	exit 1
fi

# Paring the arguments
while (( "$#" )); do
	case "$1" in
		-v | --verbose)
			verbose=1
			shift
			;;
		-h | --help)
			print_help
			exit 1
			;;
		-c | --connect)
			modem_action=0
			shift
			;;
		-d | --disconnect)
			modem_action=1
			shift
			;;
		-* | --*)
			log 1 "Unsupported flag $1" >&2
			exit 1
			;;
		*)
			log 1
			exit 1
			;;
	esac
done

if [ "$modem_action" = 0 ]; then
	log "Connecting modem"
	connect
elif [ "$modem_action" = 1 ]; then
	log "Disconnecting modem"
	disconnect
fi

